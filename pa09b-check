# Makefile for 2022-spring-cs135-pa09-grading

#  Uncomment to override shell environment defaults
#~ CXX = /usr/bin/g++
# CXXFLAGS = -std=c++14 -Wall -Wextra -g -fno-caret-diagnostics -fsanitize=address -fsanitize=bounds

PROJECT  = pa09b
DIR      = /home/shared/cs135/kmess/$(PROJECT)

# File names
EXEC     = $(PROJECT)
SOURCES  = $(PROJECT).cpp
HEADERS  =
OBJECTS  = $(PROJECT).o

#~ NSHE     = $$(basename $$(pwd) | sed 's/^.*-a\?//')
NSHE     = $$(whoami | sed 's/^a//')
AUTHOR   = $$(grep $(NSHE) /etc/passwd | cut -d: -f5 | sed 's/,.*$$//')

# cpplint filters
FILTERS  = +,-build/header_guard,-build/include_alpha,-build/namespaces,-whitespace/indent,-whitespace/braces,-whitespace/end_of_line,-whitespace/ending_newline,-whitespace/blank_line,-readability/braces,-runtime/references,-runtime/explicit,-runtime/int,-runtime/threadsafe_fn,-build/include_subdir

# ANSI features
BOLD     = \e[1m
NORM     = \e[0m
RED      = \e[0;91m
GREEN    = \e[0;92m

.PHONY: clean cloc cppcheck cpplint check grade help judge list pclint spec .header

check: .header cppcheck pclint cpplint cloc spec

# build executable
$(EXEC): $(OBJECTS)
	$(CXX) $(OBJECTS) -o $(EXEC) || :

# build object files
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@ || :

clean:
	rm -f $(OBJECTS) $(EXEC)

cloc:
	@echo -e "$(BOLD)Counting lines of code:$(NORM)"
	@cloc --quiet --by-file --unix --by-percent='cm' $(HEADERS) $(SOURCES) | sed 1,2d || :
	@echo

cppcheck:
	@echo -e "$(BOLD)Running cppcheck:\n$(NORM)"
	@cppcheck --quiet --language=c++ --std=c++14 \
		--template='{file}:{line}: {severity}: {message}' \
		--enable=warning,style,information \
		--suppress=missingIncludeSystem \
		$(SOURCES) 2>&1 || :
	@echo

cpplint:
	@echo -e "$(BOLD)Running cpplint:$(NORM)\n"
	@cpplint --quiet --filter=$(FILTERS) $(HEADERS) $(SOURCES) 2>&1 || :
	@echo

grade: check

help:
	@echo "Type 'make' followed by an option, e.g. 'make grade'"
	@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | \
		awk -v RS= -F: '/^# File/,/^# Finished Make data base/ { \
			if ($$1 !~ "^[#.]") {print $$1}}' | \
		sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$'
	@echo

#~ judge: $(EXEC)
#~ 	@echo -e "\n$(BOLD)Judging program output for correctness:$(NORM)"
#~ 	@for i in {0..2}; do \
#~ 		echo; \
#~ 		judge -v -p $(EXEC) -i $(DIR)/$(PROJECT)-input$$i.txt -o $(DIR)/$(PROJECT)-output$$i.txt || : ;\
#~ 	done
#~ 	@for fn in reference mandalorian deathstar; do \
#~ 		valgrind -q --max-stackframe=8388608 ./$(EXEC) $(DIR)/$$fn.ppm $$fn-output.ppm  || : ;\
#~ 		convert $$fn-output.ppm $$fn-output.png || : ;\
#~ 		convert -compress none $$fn-output.png $$fn-output.ppm || : ;\
#~ 		diff -s $$fn-output.ppm $(DIR)/$$fn-expected.ppm || : ;\
#~ 		rm -f $$fn-output.png >/dev/null || : ;\
#~ 	done
#~ 	@echo -e '\nDone.\n'

list: help

pclint:
	@echo -e "$(BOLD)Running pclint:$(NORM)"
	@pclint -b -w2 -h4 -e505 -e506 -e534 -e665 -e666 -e1502 -e2666 -width{0} $(SOURCES) 2>&1 || :
	@echo

#~ spec:
#~ 	@echo -e "$(BOLD)Checking $(PROJECT)-specific requirement(s):$(NORM)\n"
#~ 	@if [ ! -f $(PROJECT).cpp ]; then \
#~ 		echo -e "$(RED)>>> Check filename. '$(PROJECT).cpp' not found$(NORM)" ;\
#~ 	fi
#~ 	@echo

.header:
	@echo -e "\n$(BOLD)Date:$(NORM)\t$$(date)"
#~ 	@echo -e "$(BOLD)Author:$(NORM)\t$(AUTHOR)"
#~ 	@echo -e "$(BOLD)NSHE:$(NORM)\t$(NSHE)"
	@echo -e "$(BOLD)Assign:$(NORM)\t$(PROJECT)"
#~ 	@echo -e "$(BOLD)Submit:$(NORM)\t$$(ls -l $(PROJECT).cpp | awk '{print $$6,$$7,$$8}')"
	@echo

#~ EOF
